{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taylo\\\\Desktop\\\\TaylorCoding\\\\React Course\\\\Auth\\\\src\\\\store\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet logoutTimer;\nconst AuthContext = /*#__PURE__*/React.createContext({\n  token: \"\",\n  isLoggedIn: false,\n  logIn: token => {},\n  logOut: () => {}\n});\n\nconst calculateRemainingTime = expirationTime => {\n  const currentTime = new Date().getTime();\n  const adjExpirationTime = new Date(expirationTime).getTime(); //convert to date object\n\n  console.log(\"adj\", adjExpirationTime);\n  const remainingDuration = adjExpirationTime - currentTime;\n  console.log(\"rem\", remainingDuration);\n  return remainingDuration;\n};\n\nconst retreiveStoredToken = () => {\n  const storedToken = localStorage.getItem(\"token\");\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\n\n  if (remainingTime <= 60000) {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n    return null;\n  }\n\n  return {\n    token: storedToken,\n    duration: remainingTime\n  };\n};\n\nexport const AuthContextProvider = props => {\n  _s();\n\n  const tokenData = retreiveStoredToken(); //\n\n  let initialToken;\n\n  if (tokenData) {\n    initialToken = tokenData.token;\n  }\n\n  const [token, setToken] = useState(initialToken);\n  const userIsLoggedIn = !!token; //boolean\n\n  const logOutHandler = () => {\n    setToken(null);\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"expirationTime\");\n\n    if (logoutTimer) {\n      clearTimeout(logoutTimer);\n    }\n  };\n\n  const logInHandler = (token, expirationTime) => {\n    setToken(token);\n    localStorage.setItem(\"token\", token);\n    localStorage.setItem(\"expirationTime\", expirationTime); //must be string\n\n    const remainingTime = calculateRemainingTime(expirationTime);\n    logoutTimer = setTimeout(logOutHandler, remainingTime);\n  };\n\n  useEffect(() => {\n    if (tokenData) {\n      console.log(tokenData.duration);\n      logoutTimer = setTimeout(logOutHandler, tokenData.duration); //get time if token still has more than 6000ms remaining\n    }\n  }, [tokenData, logOutHandler]);\n  const contextValue = {\n    token: token,\n    isLoggedIn: userIsLoggedIn,\n    logIn: logInHandler,\n    logOut: logOutHandler\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"w4PGjzwU+znkNWWv/cmJxDZqQPE=\");\n\n_c = AuthContextProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/taylo/Desktop/TaylorCoding/React Course/Auth/src/store/AuthContext.js"],"names":["React","useState","useEffect","logoutTimer","AuthContext","createContext","token","isLoggedIn","logIn","logOut","calculateRemainingTime","expirationTime","currentTime","Date","getTime","adjExpirationTime","console","log","remainingDuration","retreiveStoredToken","storedToken","localStorage","getItem","storedExpirationDate","remainingTime","removeItem","duration","AuthContextProvider","props","tokenData","initialToken","setToken","userIsLoggedIn","logOutHandler","clearTimeout","logInHandler","setItem","setTimeout","contextValue","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nlet logoutTimer;\r\n\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  isLoggedIn: false,\r\n  logIn: (token) => {},\r\n  logOut: () => {},\r\n});\r\n\r\nconst calculateRemainingTime = (expirationTime) => {\r\n  const currentTime = new Date().getTime();\r\n  const adjExpirationTime = new Date(expirationTime).getTime(); //convert to date object\r\n  console.log(\"adj\", adjExpirationTime);\r\n  const remainingDuration = adjExpirationTime - currentTime;\r\n  console.log(\"rem\", remainingDuration);\r\n  return remainingDuration;\r\n};\r\n\r\nconst retreiveStoredToken = () => {\r\n  const storedToken = localStorage.getItem(\"token\");\r\n  const storedExpirationDate = localStorage.getItem(\"expirationTime\");\r\n\r\n  const remainingTime = calculateRemainingTime(storedExpirationDate);\r\n\r\n  if (remainingTime <= 60000) {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n    return null;\r\n  }\r\n  return { token: storedToken, duration: remainingTime };\r\n};\r\n\r\nexport const AuthContextProvider = (props) => {\r\n  const tokenData = retreiveStoredToken(); //\r\n  let initialToken;\r\n  if (tokenData) {\r\n    initialToken = tokenData.token;\r\n  }\r\n\r\n  const [token, setToken] = useState(initialToken);\r\n  const userIsLoggedIn = !!token; //boolean\r\n\r\n  const logOutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"expirationTime\");\r\n\r\n    if (logoutTimer) {\r\n      clearTimeout(logoutTimer);\r\n    }\r\n  };\r\n\r\n  const logInHandler = (token, expirationTime) => {\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n    localStorage.setItem(\"expirationTime\", expirationTime); //must be string\r\n\r\n    const remainingTime = calculateRemainingTime(expirationTime);\r\n\r\n    logoutTimer = setTimeout(logOutHandler, remainingTime);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (tokenData) {\r\n      console.log(tokenData.duration);\r\n      logoutTimer = setTimeout(logOutHandler, tokenData.duration); //get time if token still has more than 6000ms remaining\r\n    }\r\n  }, [tokenData, logOutHandler]);\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    logIn: logInHandler,\r\n    logOut: logOutHandler,\r\n  };\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"]},"metadata":{},"sourceType":"module"}